# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcmt.source.gitea.client
from rcmt.source.gitea.client.models.gpg_key import GPGKey  # noqa: E501
from rcmt.source.gitea.client.rest import ApiException

class TestGPGKey(unittest.TestCase):
    """GPGKey unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test GPGKey
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcmt.source.gitea.client.models.gpg_key.GPGKey()  # noqa: E501
        if include_optional :
            return GPGKey(
                can_certify = True, 
                can_encrypt_comms = True, 
                can_encrypt_storage = True, 
                can_sign = True, 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                emails = [
                    rcmt.source.gitea.client.models.gpg_key_email.GPGKeyEmail(
                        email = '', 
                        verified = True, )
                    ], 
                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                id = 56, 
                key_id = '', 
                primary_key_id = '', 
                public_key = '', 
                subkeys = [
                    rcmt.source.gitea.client.models.gpg_key.GPGKey(
                        can_certify = True, 
                        can_encrypt_comms = True, 
                        can_encrypt_storage = True, 
                        can_sign = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        emails = [
                            rcmt.source.gitea.client.models.gpg_key_email.GPGKeyEmail(
                                email = '', 
                                verified = True, )
                            ], 
                        expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        id = 56, 
                        key_id = '', 
                        primary_key_id = '', 
                        public_key = '', 
                        subkeys = [
                            rcmt.source.gitea.client.models.gpg_key.GPGKey(
                                can_certify = True, 
                                can_encrypt_comms = True, 
                                can_encrypt_storage = True, 
                                can_sign = True, 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                id = 56, 
                                key_id = '', 
                                primary_key_id = '', 
                                public_key = '', 
                                verified = True, )
                            ], 
                        verified = True, )
                    ], 
                verified = True
            )
        else :
            return GPGKey(
        )

    def testGPGKey(self):
        """Test GPGKey"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
