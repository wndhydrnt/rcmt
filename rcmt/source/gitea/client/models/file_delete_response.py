# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rcmt.source.gitea.client.configuration import Configuration


class FileDeleteResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit': 'FileCommitResponse',
        'content': 'object',
        'verification': 'PayloadCommitVerification'
    }

    attribute_map = {
        'commit': 'commit',
        'content': 'content',
        'verification': 'verification'
    }

    def __init__(self, commit=None, content=None, verification=None, local_vars_configuration=None):  # noqa: E501
        """FileDeleteResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._commit = None
        self._content = None
        self._verification = None
        self.discriminator = None

        if commit is not None:
            self.commit = commit
        if content is not None:
            self.content = content
        if verification is not None:
            self.verification = verification

    @property
    def commit(self):
        """Gets the commit of this FileDeleteResponse.  # noqa: E501


        :return: The commit of this FileDeleteResponse.  # noqa: E501
        :rtype: FileCommitResponse
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this FileDeleteResponse.


        :param commit: The commit of this FileDeleteResponse.  # noqa: E501
        :type commit: FileCommitResponse
        """

        self._commit = commit

    @property
    def content(self):
        """Gets the content of this FileDeleteResponse.  # noqa: E501


        :return: The content of this FileDeleteResponse.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this FileDeleteResponse.


        :param content: The content of this FileDeleteResponse.  # noqa: E501
        :type content: object
        """

        self._content = content

    @property
    def verification(self):
        """Gets the verification of this FileDeleteResponse.  # noqa: E501


        :return: The verification of this FileDeleteResponse.  # noqa: E501
        :rtype: PayloadCommitVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this FileDeleteResponse.


        :param verification: The verification of this FileDeleteResponse.  # noqa: E501
        :type verification: PayloadCommitVerification
        """

        self._verification = verification

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileDeleteResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileDeleteResponse):
            return True

        return self.to_dict() != other.to_dict()
