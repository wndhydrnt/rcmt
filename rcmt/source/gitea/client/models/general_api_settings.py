# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rcmt.source.gitea.client.configuration import Configuration


class GeneralAPISettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_git_trees_per_page': 'int',
        'default_max_blob_size': 'int',
        'default_paging_num': 'int',
        'max_response_items': 'int'
    }

    attribute_map = {
        'default_git_trees_per_page': 'default_git_trees_per_page',
        'default_max_blob_size': 'default_max_blob_size',
        'default_paging_num': 'default_paging_num',
        'max_response_items': 'max_response_items'
    }

    def __init__(self, default_git_trees_per_page=None, default_max_blob_size=None, default_paging_num=None, max_response_items=None, local_vars_configuration=None):  # noqa: E501
        """GeneralAPISettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._default_git_trees_per_page = None
        self._default_max_blob_size = None
        self._default_paging_num = None
        self._max_response_items = None
        self.discriminator = None

        if default_git_trees_per_page is not None:
            self.default_git_trees_per_page = default_git_trees_per_page
        if default_max_blob_size is not None:
            self.default_max_blob_size = default_max_blob_size
        if default_paging_num is not None:
            self.default_paging_num = default_paging_num
        if max_response_items is not None:
            self.max_response_items = max_response_items

    @property
    def default_git_trees_per_page(self):
        """Gets the default_git_trees_per_page of this GeneralAPISettings.  # noqa: E501


        :return: The default_git_trees_per_page of this GeneralAPISettings.  # noqa: E501
        :rtype: int
        """
        return self._default_git_trees_per_page

    @default_git_trees_per_page.setter
    def default_git_trees_per_page(self, default_git_trees_per_page):
        """Sets the default_git_trees_per_page of this GeneralAPISettings.


        :param default_git_trees_per_page: The default_git_trees_per_page of this GeneralAPISettings.  # noqa: E501
        :type default_git_trees_per_page: int
        """

        self._default_git_trees_per_page = default_git_trees_per_page

    @property
    def default_max_blob_size(self):
        """Gets the default_max_blob_size of this GeneralAPISettings.  # noqa: E501


        :return: The default_max_blob_size of this GeneralAPISettings.  # noqa: E501
        :rtype: int
        """
        return self._default_max_blob_size

    @default_max_blob_size.setter
    def default_max_blob_size(self, default_max_blob_size):
        """Sets the default_max_blob_size of this GeneralAPISettings.


        :param default_max_blob_size: The default_max_blob_size of this GeneralAPISettings.  # noqa: E501
        :type default_max_blob_size: int
        """

        self._default_max_blob_size = default_max_blob_size

    @property
    def default_paging_num(self):
        """Gets the default_paging_num of this GeneralAPISettings.  # noqa: E501


        :return: The default_paging_num of this GeneralAPISettings.  # noqa: E501
        :rtype: int
        """
        return self._default_paging_num

    @default_paging_num.setter
    def default_paging_num(self, default_paging_num):
        """Sets the default_paging_num of this GeneralAPISettings.


        :param default_paging_num: The default_paging_num of this GeneralAPISettings.  # noqa: E501
        :type default_paging_num: int
        """

        self._default_paging_num = default_paging_num

    @property
    def max_response_items(self):
        """Gets the max_response_items of this GeneralAPISettings.  # noqa: E501


        :return: The max_response_items of this GeneralAPISettings.  # noqa: E501
        :rtype: int
        """
        return self._max_response_items

    @max_response_items.setter
    def max_response_items(self, max_response_items):
        """Sets the max_response_items of this GeneralAPISettings.


        :param max_response_items: The max_response_items of this GeneralAPISettings.  # noqa: E501
        :type max_response_items: int
        """

        self._max_response_items = max_response_items

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralAPISettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeneralAPISettings):
            return True

        return self.to_dict() != other.to_dict()
