# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rcmt.source.gitea.client.configuration import Configuration


class MarkdownOption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'context': 'str',
        'mode': 'str',
        'text': 'str',
        'wiki': 'bool'
    }

    attribute_map = {
        'context': 'Context',
        'mode': 'Mode',
        'text': 'Text',
        'wiki': 'Wiki'
    }

    def __init__(self, context=None, mode=None, text=None, wiki=None, local_vars_configuration=None):  # noqa: E501
        """MarkdownOption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._context = None
        self._mode = None
        self._text = None
        self._wiki = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if mode is not None:
            self.mode = mode
        if text is not None:
            self.text = text
        if wiki is not None:
            self.wiki = wiki

    @property
    def context(self):
        """Gets the context of this MarkdownOption.  # noqa: E501

        Context to render  in: body  # noqa: E501

        :return: The context of this MarkdownOption.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MarkdownOption.

        Context to render  in: body  # noqa: E501

        :param context: The context of this MarkdownOption.  # noqa: E501
        :type context: str
        """

        self._context = context

    @property
    def mode(self):
        """Gets the mode of this MarkdownOption.  # noqa: E501

        Mode to render  in: body  # noqa: E501

        :return: The mode of this MarkdownOption.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MarkdownOption.

        Mode to render  in: body  # noqa: E501

        :param mode: The mode of this MarkdownOption.  # noqa: E501
        :type mode: str
        """

        self._mode = mode

    @property
    def text(self):
        """Gets the text of this MarkdownOption.  # noqa: E501

        Text markdown to render  in: body  # noqa: E501

        :return: The text of this MarkdownOption.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MarkdownOption.

        Text markdown to render  in: body  # noqa: E501

        :param text: The text of this MarkdownOption.  # noqa: E501
        :type text: str
        """

        self._text = text

    @property
    def wiki(self):
        """Gets the wiki of this MarkdownOption.  # noqa: E501

        Is it a wiki page ?  in: body  # noqa: E501

        :return: The wiki of this MarkdownOption.  # noqa: E501
        :rtype: bool
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this MarkdownOption.

        Is it a wiki page ?  in: body  # noqa: E501

        :param wiki: The wiki of this MarkdownOption.  # noqa: E501
        :type wiki: bool
        """

        self._wiki = wiki

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkdownOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MarkdownOption):
            return True

        return self.to_dict() != other.to_dict()
