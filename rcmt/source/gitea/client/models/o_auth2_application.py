# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rcmt.source.gitea.client.configuration import Configuration


class OAuth2Application(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'confidential_client': 'bool',
        'created': 'datetime',
        'id': 'int',
        'name': 'str',
        'redirect_uris': 'list[str]'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'confidential_client': 'confidential_client',
        'created': 'created',
        'id': 'id',
        'name': 'name',
        'redirect_uris': 'redirect_uris'
    }

    def __init__(self, client_id=None, client_secret=None, confidential_client=None, created=None, id=None, name=None, redirect_uris=None, local_vars_configuration=None):  # noqa: E501
        """OAuth2Application - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._client_secret = None
        self._confidential_client = None
        self._created = None
        self._id = None
        self._name = None
        self._redirect_uris = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if confidential_client is not None:
            self.confidential_client = confidential_client
        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2Application.  # noqa: E501


        :return: The client_id of this OAuth2Application.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2Application.


        :param client_id: The client_id of this OAuth2Application.  # noqa: E501
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2Application.  # noqa: E501


        :return: The client_secret of this OAuth2Application.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2Application.


        :param client_secret: The client_secret of this OAuth2Application.  # noqa: E501
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def confidential_client(self):
        """Gets the confidential_client of this OAuth2Application.  # noqa: E501


        :return: The confidential_client of this OAuth2Application.  # noqa: E501
        :rtype: bool
        """
        return self._confidential_client

    @confidential_client.setter
    def confidential_client(self, confidential_client):
        """Sets the confidential_client of this OAuth2Application.


        :param confidential_client: The confidential_client of this OAuth2Application.  # noqa: E501
        :type confidential_client: bool
        """

        self._confidential_client = confidential_client

    @property
    def created(self):
        """Gets the created of this OAuth2Application.  # noqa: E501


        :return: The created of this OAuth2Application.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this OAuth2Application.


        :param created: The created of this OAuth2Application.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this OAuth2Application.  # noqa: E501


        :return: The id of this OAuth2Application.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuth2Application.


        :param id: The id of this OAuth2Application.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OAuth2Application.  # noqa: E501


        :return: The name of this OAuth2Application.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuth2Application.


        :param name: The name of this OAuth2Application.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this OAuth2Application.  # noqa: E501


        :return: The redirect_uris of this OAuth2Application.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this OAuth2Application.


        :param redirect_uris: The redirect_uris of this OAuth2Application.  # noqa: E501
        :type redirect_uris: list[str]
        """

        self._redirect_uris = redirect_uris

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2Application):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuth2Application):
            return True

        return self.to_dict() != other.to_dict()
