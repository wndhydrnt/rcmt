# coding: utf-8

"""
    Gitea API.

    This documentation describes the Gitea API.  # noqa: E501

    The version of the OpenAPI document: 1.18.0+1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from rcmt.source.gitea.client.configuration import Configuration


class WikiPageMetaData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'html_url': 'str',
        'last_commit': 'WikiCommit',
        'sub_url': 'str',
        'title': 'str'
    }

    attribute_map = {
        'html_url': 'html_url',
        'last_commit': 'last_commit',
        'sub_url': 'sub_url',
        'title': 'title'
    }

    def __init__(self, html_url=None, last_commit=None, sub_url=None, title=None, local_vars_configuration=None):  # noqa: E501
        """WikiPageMetaData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._html_url = None
        self._last_commit = None
        self._sub_url = None
        self._title = None
        self.discriminator = None

        if html_url is not None:
            self.html_url = html_url
        if last_commit is not None:
            self.last_commit = last_commit
        if sub_url is not None:
            self.sub_url = sub_url
        if title is not None:
            self.title = title

    @property
    def html_url(self):
        """Gets the html_url of this WikiPageMetaData.  # noqa: E501


        :return: The html_url of this WikiPageMetaData.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this WikiPageMetaData.


        :param html_url: The html_url of this WikiPageMetaData.  # noqa: E501
        :type html_url: str
        """

        self._html_url = html_url

    @property
    def last_commit(self):
        """Gets the last_commit of this WikiPageMetaData.  # noqa: E501


        :return: The last_commit of this WikiPageMetaData.  # noqa: E501
        :rtype: WikiCommit
        """
        return self._last_commit

    @last_commit.setter
    def last_commit(self, last_commit):
        """Sets the last_commit of this WikiPageMetaData.


        :param last_commit: The last_commit of this WikiPageMetaData.  # noqa: E501
        :type last_commit: WikiCommit
        """

        self._last_commit = last_commit

    @property
    def sub_url(self):
        """Gets the sub_url of this WikiPageMetaData.  # noqa: E501


        :return: The sub_url of this WikiPageMetaData.  # noqa: E501
        :rtype: str
        """
        return self._sub_url

    @sub_url.setter
    def sub_url(self, sub_url):
        """Sets the sub_url of this WikiPageMetaData.


        :param sub_url: The sub_url of this WikiPageMetaData.  # noqa: E501
        :type sub_url: str
        """

        self._sub_url = sub_url

    @property
    def title(self):
        """Gets the title of this WikiPageMetaData.  # noqa: E501


        :return: The title of this WikiPageMetaData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WikiPageMetaData.


        :param title: The title of this WikiPageMetaData.  # noqa: E501
        :type title: str
        """

        self._title = title

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WikiPageMetaData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WikiPageMetaData):
            return True

        return self.to_dict() != other.to_dict()
